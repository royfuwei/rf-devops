# Default values for demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

deployments:
  - name: rfjs-api
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    image:
      repository: harbor.royfuwei.dev/royfuwei/rfjs-api
      pullPolicy: Always
      # pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
    service:
      type: ClusterIP
      port: 8001
      externalPort: 31011
    env:
      NODE_ENV: production
      APP_API_PORT: '8001'
      HOST: '0.0.0.0'
    envSecrets:
      - DB_MONGO_URI
      - PUBLIC_SUPABASE_URL
      - PUBLIC_SUPABASE_ANON_KEY
      - LINE_CHANNEL_ID
      - LINE_CHANNEL_ACCESS_TOKEN
      - LINE_CHANNEL_SECRET
      - LINE_NOTIFY_CLIENT_ID
      - LINE_NOTIFY_CLIENT_SECRET
    # Additional volumes on the output Deployment definition.
    volumes: []
    # - name: foo
    #   secret:
    #     secretName: mysecret
    #     optional: false

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts: []
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true
    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  - name: rfjs-gql
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    image:
      repository: harbor.royfuwei.dev/royfuwei/rfjs-gql
      pullPolicy: Always
      # pullPolicy: IfNotPresent
      # Overrides the image tag whose default is the chart appVersion.
      tag: "latest"
    service:
      type: ClusterIP
      port: 8002
      externalPort: 31012
    env:
      NODE_ENV: production
      APP_API_PORT: '8001'
      HOST: '0.0.0.0'
    envSecrets:
      - DB_MONGO_URI
      - PUBLIC_SUPABASE_URL
      - PUBLIC_SUPABASE_ANON_KEY
      - LINE_CHANNEL_ID
      - LINE_CHANNEL_ACCESS_TOKEN
      - LINE_CHANNEL_SECRET
      - LINE_NOTIFY_CLIENT_ID
      - LINE_NOTIFY_CLIENT_SECRET
    # Additional volumes on the output Deployment definition.
    volumes: []
    # - name: foo
    #   secret:
    #     secretName: mysecret
    #     optional: false

    # Additional volumeMounts on the output Deployment definition.
    volumeMounts: []
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true
    resources: {}
      # We usually recommend not to specify default resources and to leave this as a conscious
      # choice for the user. This also increases chances charts run on environments with little
      # resources, such as Minikube. If you do want to specify resources, uncomment the following
      # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
      #   memory: 128Mi
  - name: rfjs-web
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
      # targetMemoryUtilizationPercentage: 80
    image:
      repository: harbor.royfuwei.dev/royfuwei/rfjs-web
      pullPolicy: Always
      tag: "latest"
    service:
      type: ClusterIP
      port: 3000
      externalPort: 31013
    env:
    envSecrets:
    # Additional volumes on the output Deployment definition.
    volumes: []
    # Additional volumeMounts on the output Deployment definition.
    volumeMounts: []
    resources: {}

ingress:
  enabled: true
  tls:
    enabled: true
    secretName: rfjs-tls-secret  # 使用的 TLS 憑證
    certManager:
      enabled: true   # ✅ 改成底下是一個物件，這樣 template 可以用
      issuerType: cluster-issuer  # "issuer" or "cluster-issuer"
      issuerName: letsencrypt-dns
  annotations:
    spec.ingressClassName: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: '0'
    nginx.ingress.kubernetes.io/proxy-read-timeout: '600'
    nginx.ingress.kubernetes.io/proxy-send-timeout: '600'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"   # ✅ 新增這行
  hosts:
    - host: rfjs.test.royfuwei.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: rfjs-api
          servicePort: 8001
    - host: rfjs.api.royfuwei.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: rfjs-api
          servicePort: 8001
    - host: rfjs.gql.royfuwei.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: rfjs-gql
          servicePort: 8002
    - host: rfjs.web.royfuwei.dev
      paths:
        - path: /
          pathType: Prefix
          serviceName: rfjs-web
          servicePort: 3000
          
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}
